{"version":3,"file":"static/js/154.47452a6f.chunk.js","mappings":"+NAwDA,EAjDiB,SAAHA,GAAUA,EAAJC,KA8ClB,OAAOC,EAAAA,EAAAA,KAAA,SACT,E,UClDMC,EAAS,CACb,WACA,OACA,SACA,SACA,SACA,YACA,SACA,cACA,OACA,SACA,OACA,WACA,YACA,QACA,UACA,QACA,WACA,QACA,SACA,aACA,UACA,SACA,SACA,QACA,WACA,WACA,QACA,SACA,cACA,SACA,aAoCF,EAjC4B,WAC1B,IAAAC,GAAwCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7CI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAEpCI,GAAuBC,EAAAA,EAAAA,MACjBC,GADkCL,EAAAA,EAAAA,GAAAG,EAAA,GAArB,GACaG,IAAI,QAiBpC,OAfAC,EAAAA,EAAAA,YAAU,WAER,IAQMC,EARkB,WACtB,IAAMC,EAAiBb,EAAOc,MAAK,iBAAM,GAAMC,KAAKC,QAAQ,IAK5D,OAJuBP,EAAU,CAC5BA,GAAUQ,QAAAC,EAAAA,EAAAA,GAAKL,EAAeM,MAAM,EAAG,KACxCN,EAAeM,MAAM,EAAG,EAG9B,CACuBC,GACvBd,EAAgBM,EAClB,GAAG,CAACH,IACJY,QAAQC,IAAIjB,IAGVkB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEzB,EAAAA,EAAAA,KAAA,MAAAyB,SAAI,0CACJzB,EAAAA,EAAAA,KAAA,MAAAyB,SACGnB,EAAaoB,KAAI,SAAA3B,GAAI,OACpBC,EAAAA,EAAAA,KAAC2B,EAAQ,CAAC5B,KAAMA,GAAQ,QAKlC,EC3DA,EARmB,WACjB,OACEC,EAAAA,EAAAA,KAAA,OAAAyB,UACEzB,EAAAA,EAAAA,KAAC4B,EAAmB,KAG1B,C","sources":["components/pageComponents/CitiesPageComponent/CityItem/CityItem.jsx","components/pageComponents/CitiesPageComponent/CitiesPageComponent.jsx","pages/CitiesPage.jsx"],"sourcesContent":["// import { useState } from 'react';\n// import { useSearchParams } from 'react-router-dom';\n// import { useTemperature } from '../../../../hooks/TemperatureContext';\n// import { useEffect } from 'react';\n// import { toast } from 'react-hot-toast';\n// import { requestWeatherByCity } from '../../../../services/API_services';\n\nconst CityItem = ({ city }) => {\n  // const [icon, setIcon] = useState('');\n  // const [temperature, setTemperature] = useState('');\n  // const [weatherConditions, setWeatherConditions] = useState('');\n  // const [status, setStatus] = useState('idle');\n  // const [searchParams, setSearchParams] = useSearchParams();\n  // const searchCity = searchParams.get('city');\n  // const [cityName, setCityName] = useState('');\n\n  // useEffect(() => {\n  //   const getCurrentWeather = async () => {\n  //     try {\n  //       console.log(city);\n  //       const weatherInfo = await requestWeatherByCity(city);\n  //       if (weatherInfo.status === 200) {\n  //         // setStatus('resolved');\n  //         setCityName(weatherInfo.data.name);\n  //         setTemperature(weatherInfo.data.main.temp);\n  //         setIcon(weatherInfo.data.weather[0].icon);\n  //         // setWeatherConditions(weatherInfo.data.weather[0].main);\n  //         console.log(weatherInfo);\n  //       }\n  //     } catch (error) {\n  //       if (city) {\n  //         // searchParams.delete(\"city\");\n  //         // setSearchParams(searchParams);\n  //         // setStatus('rejected');\n\n  //         if (error.message === 'Request failed with status code 404') {\n  //           toast.error(\n  //             'There is no result matching your query. Check its spelling or enter another city',\n  //             {\n  //               id: 'error1',\n  //             }\n  //           );\n  //         } else {\n  //           toast.error(`API error: ${error.message}`, {\n  //             id: 'error2',\n  //           });\n  //         }\n  //       }\n  //     }\n  //   };\n\n  //   getCurrentWeather(city);\n  // }, [city]);\n  return <div></div>;\n};\n\nexport default CityItem;\n","import { useState, useEffect } from 'react';\nimport CityItem from './CityItem/CityItem';\nimport { useSearchParams } from 'react-router-dom';\n\nconst cities = [\n  'Brasilia',\n  'Kyiv',\n  'Berlin',\n  'London',\n  'Madrid',\n  'Bucharest',\n  'Warsaw',\n  '\tAmsterdam',\n  'Rome',\n  'Dublin',\n  'Riga',\n  'Budapest',\n  'Sao Paulo',\n  'Osaka',\n  'Beijing',\n  'Cairo',\n  'New York',\n  'Seoul',\n  'Athens',\n  'Copenhagen',\n  'Tallinn',\n  'Prague',\n  'Manila',\n  'Delhi',\n  'Brussels',\n  'Shanghai',\n  'Lagos',\n  'Vienna',\n  'Mexico City',\n  'Mumbai',\n  'Edinburgh',\n];\n\nconst CitiesPageComponent = () => {\n  const [randomCities, setRandomCities] = useState([]);\n\n  const [searchParams] = useSearchParams();\n  const searchCity = searchParams.get('city');\n\n  useEffect(() => {\n    // Function to get 4 random cities from the array\n    const getRandomCities = () => {\n      const shuffledCities = cities.sort(() => 0.5 - Math.random()); // Shuffle the array\n      const selectedCities = searchCity\n        ? [searchCity, ...shuffledCities.slice(0, 4)]\n        : shuffledCities.slice(0, 5); // Get the first 4 elements\n\n      return selectedCities;\n    };\n    const selectedCities = getRandomCities();\n    setRandomCities(selectedCities);\n  }, [searchCity]); // Empty dependency array ensures it runs only on the initial render\n  console.log(randomCities);\n\n  return (\n    <div>\n      <h2>Randomly Selected Cities and Weather</h2>\n      <ul>\n        {randomCities.map(city => (\n          <CityItem city={city} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default CitiesPageComponent;\n","import CitiesPageComponent from '../components/pageComponents/CitiesPageComponent/CitiesPageComponent';\n\nconst CitiesPage = () => {\n  return (\n    <div>\n      <CitiesPageComponent />\n    </div>\n  );\n};\n\nexport default CitiesPage;\n"],"names":["_ref","city","_jsx","cities","_useState","useState","_useState2","_slicedToArray","randomCities","setRandomCities","_useSearchParams","useSearchParams","searchCity","get","useEffect","selectedCities","shuffledCities","sort","Math","random","concat","_toConsumableArray","slice","getRandomCities","console","log","_jsxs","children","map","CityItem","CitiesPageComponent"],"sourceRoot":""}